===================  OPERATORS ========================

Evaluate the expression in a step by step way based on operator precedence and associativity

1) printf("%d\n",1==5==5);
Evaluation:     
1 == 5[== Associativity: Left to Right, 1==5 -> 0]
0 == 5[0==5 -> 0]
It prints 0
-------------------------------------------------------------
2) int i =0;
   printf("%d %d",i,i++);
Evaluation:
i++ has highest precedence, i will be evaluated to 0 in same step[post-increment], i will evaluated to 1 at next step
It prints 1 0(Printf will execute from left to right)
-------------------------------------------------------------
3) int x=5;
   printf("%d %d %d\n",x++,x++,x++);
Evaluation:
Right most x++ gets evaluated first, x will be evaluated to 5 in same step[post-increment], x will evaluated to 6 at next step
x will be evaluated to 6 in same step[post-increment], x will evaluated to 7 at next step
x will be evaluated to 7 in same step[post-increment], x will evaluated to 8 at next step
It prints 7 6 5(Printf will execute from left to right)
-------------------------------------------------------------
4) int x=2;
   printf("%d   ",++x++);
   printf("%d\n",x++);
Evaluation:
We will get the error at the first printf(++x++)
so second printf statement will  not be executed
-------------------------------------------------------------
5) int k=1;
   printf("%d==1 is ""%s\n",k,k==1?"TRUE":"FALSE");
Evaluation:
k==1?"TRUE":"FALSE"[1==1?"TRUE":"FALSE" -> TRUE]
It prints 1==1 is TRUE
-------------------------------------------------------------
6) int i=5;
   i=i++ - --i + ++i;
Evaluation:
i will be evaluated from the left
i= i++ - --i + ++i
i= i++ - --i + ++5
i= i++ - --i + 6
i= i++ - --6 + 6
i= i++ - 5 + 6
i= 5++ -5 + 6
i= 5 -5 + 6
i=6
-------------------------------------------------------------
7) int a=7;
   a+=a+=a-=6;
   printf("%d\n",a);
Evaluation: 
a+=a+=a-=6[Associativity: a-=6 -> a=7-6 -> 1]
a+=a+=1[Associativity: a+=1 -> a=1+1 -> 2]
a+=2[Associativity: a+=2 -> a=2+2 -> 4]
a=4
-------------------------------------------------------------
8) int x=10,y=5,p,q;
   p=x>9;
   q=p||(x=5,y=10);
   printf("%d %d %d\n",q,x,y);
Evaluation:
p=x>9 gives p=1
q= 1 || (x=5,y=10); gives q=1
It prints: 1, 10, 15
-------------------------------------------------------------
9) int x=2,y=1;
   y+=x<<=2;
   printf("%d %d\n",x,y);
Evaluation:
y+=x<<=2;
y+=(x=x<<2);   (shifiting x by 2 bits gives 8)
y+=8;
y=y+8;
y=1+8; (since given y=1)
y=9;
---------------------------------------------------------------
10) int x=2,y=4,z;
    z=y++*x++|y--;
    printf("%d\n",z);
Evaluation:
z = y++ * x++ | y--;
z=  4 *  2   | 5;
z=   8 | 5 ;     
z= 13;
It prins: 13
---------------------------------------------------------------
11) int a=5,b=6,c=7,d;
    d=a&=b&=c&&a;
    printf("%d\n",d);
Evaluation: 
d=a&=b&=c&&a
d=5&=6&=7&&5[first precedence: 7&&5 = 1]
d=5&=6&=1[Precedence: &=(right to left) -> 6=6&1 = 0]
d=5&=0[5=5&0 = 0]
d=0 
----------------------------------------------------------------
12) int i=10;
    i=(10<10)?(10>=10)?(10<=10)?1:2:3:4;
    printf("%d\n",i);
Evaluaton:
i=(10<10)?(10>=10)?(10<=10)?1:2:3:4[Associativity: right to left]
i=(10<10)?(10>=10)?1:3:4
i=(10<10)?1:4
i=4
-----------------------------------------------------------------
13) int a=10,b=20;
    a=(a>5||b=6?40:50);
    printf("%d\n",a);
Evaluation:
It gives error.
a=(a>5||b=6?40:50)[b=6 -> error]
-----------------------------------------------------------------
14) printf("%x\n",-1>>4);
    printf("%x\n",-1<<4);
Evaluation:
printf("%x\n", -1>>4); -> ffffffff(Because right shifting the signed number add 1's to the MSB)
printf("%x\n", -1<<4); -> fffffff0(Because left shifting the number add 0's to the LSB)
------------------------------------------------------------------
15) int x=7;
    x=(x<<=x%2);
    printf("%d\n",x);
Evaluation:
x=(x<<=7%2)[Precedence -> % -> 7%2 = 1]
x=(x<<=1)[x=x<<1 -> 7<<1 -> 14]
x=(x=14)
x=14
-------------------------------------------------------------------
16) int a=2,b=5,c=1;
    printf("%d\n",(b>=a>=c?1:0));
Evaluation:
b>=a>=c?1:0[First precedence: b>=a -> 5>=2 = 1]
1>=c?1:0[1>=c -> 1>=1 = 1]
It prints 1.
-------------------------------------------------------------------
17) int a=5;
    a=a-~a +1;
    printf("%d\n",a);
Evaluation:
a=a-~a +1
a=5-~5+1[First precedence: ~a -> ~5 -> -(5+1) -> -6]
a=5- -6+1
a=11+1
a=12
------------------------------------------------------------------
18) a=b=c=1;
    x=--a||++b*(3-1)/2&&b*(--c/3);
    printf("%d\n",x);
Evaluation:
x=--a||++b*(3-1)/2&&b*(--c/3);[(3-1) -> 2
x=--a||++b*2/2&&b*(--c/3)[(--c/3) -> [--c = 0] -> (0/3) -> 0]
x=--a||++b*2/2&&b*0[--a = 0 and ++b = 2]
x= 0||2*2/2&&2*0[2*2 = 4]
x=0||4/2&&2*0[4/2 = 2]
x=0||2&&2*0[2*0 = 0]
x=0||2&&0[2&&0 = 0]
x=0||0
x=0
------------------------------------------------------------------
19) a=10
    b = -5
    c = 2.5
    printf("%d %d",sizeof(a) + sizeof((++b) *c, b);
Evaluation:
sizeof(a)and sizeof((++b) *c) result depends on the compiler.
b is -5 , because sizeof operator doesn't evaluate the expression inside it and It gives the result of the datatype inside it.
------------------------------------------------------------------- 
20) int i=5;
    i=i++ - i
    printf("%d",i)
Evaluation:
i=i++ - i[i++ = 5 -> because of post-increment, at next step i=6]
i=5 - 6
i= -1